enum Result {
    Success,
    Error(i32)
}

enum Message {
    Quit,
    Move(i32)
}

fn main() {
    // Test unit variants
    let success = Result::Success;
    let quit_msg = Message::Quit;

    // Test single-field variants
    let error = Result::Error(404);
    let move_msg = Message::Move(100);

    // Test pattern matching with unit variants
    let success_code = match success {
        Result::Success -> 0,
        Result::Error(code) -> code
    };

    // Test pattern matching with field extraction
    let error_code = match error {
        Result::Success -> 0,
        Result::Error(code) -> code
    };

    let move_distance = match move_msg {
        Message::Quit -> 0,
        Message::Move(distance) -> distance
    };

    print("Success code: ${success_code}");
    print("Error code: ${error_code}");
    print("Move distance: ${move_distance}");
}