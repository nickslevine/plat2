// Test generic functions with type inference
fn identity<T>(value: T) -> T {
  return value;
}

fn create_pair<T, U>(first: T, second: U) -> Int32 {
  print("Created pair");
  return 42;
}

fn main() -> Int32 {
  // Test with I32 - type inferred from argument
  let x = identity(10);
  print("Identity I32: ${x}");

  // Test with String - type inferred from argument
  let name = identity("hello");
  print("Identity String: ${name}");

  // Test with multiple type parameters - inferred from both arguments
  let result = create_pair(100, "world");
  print("Pair result: ${result}");

  return 0;
}
