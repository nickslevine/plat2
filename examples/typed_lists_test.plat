fn main() {
  // Test with explicit type annotations

  // Bool list with explicit type
  let flags: List[Bool] = [true, false, true, false];
  print(value = "Bool list: ${flags}");
  print(value = "First flag: ${flags[0]}");
  print(value = "Flags length: ${flags.len()}");

  // String list with explicit type
  let words: List[String] = ["hello", "world", "plat"];
  print(value = "String list: ${words}");
  print(value = "First word: ${words[0]}");
  print(value = "Words length: ${words.len()}");

  // Int32 list with explicit type
  let numbers: List[Int32] = [10, 20, 30];
  print(value = "Int32 list: ${numbers}");
  print(value = "First number: ${numbers[0]}");
  print(value = "Numbers length: ${numbers.len()}");

  // Test iterations
  print(value = "Iterating flags:");
  for (flag: Bool in flags) {
    print(value = "Flag: ${flag}");
  }

  print(value = "Iterating words:");
  for (word: String in words) {
    print(value = "Word: ${word}");
  }

  print(value = "Iterating numbers:");
  for (num: Int32 in numbers) {
    print(value = "Number: ${num}");
  }
}