fn main() -> Int32 {
  print(value = "Testing binary file write and read...");

  // Open file for writing
  let fd_result: Result<Int32, String> = file_open(path = "/tmp/test.bin", mode = "w");
  let fd: Int32 = match fd_result {
    Result::Ok(f: Int32) -> f,
    Result::Err(e: String) -> -1
  };

  if (fd < 0) {
    print(value = "Failed to open file for writing");
    return 1;
  }

  // Create binary data (5 bytes: 0-4)
  let data: List[Int8] = [0i8, 1i8, 2i8, 3i8, 4i8];

  // Write binary data
  let write_result: Result<Int32, String> = file_write_binary(fd = fd, data = data);
  let bytes_written: Int32 = match write_result {
    Result::Ok(n: Int32) -> n,
    Result::Err(e: String) -> -1
  };

  if (bytes_written < 0) {
    print(value = "Failed to write binary data");
    return 1;
  }

  print(value = "✓ Wrote ${bytes_written} bytes");

  // Close the file
  let close1: Result<Bool, String> = file_close(fd = fd);
  let c1: Bool = match close1 {
    Result::Ok(b: Bool) -> b,
    Result::Err(e: String) -> false
  };

  // Open file for reading
  let fd2_result: Result<Int32, String> = file_open(path = "/tmp/test.bin", mode = "r");
  let fd2: Int32 = match fd2_result {
    Result::Ok(f: Int32) -> f,
    Result::Err(e: String) -> -1
  };

  if (fd2 < 0) {
    print(value = "Failed to open file for reading");
    return 1;
  }

  // Read binary data
  let read_result: Result<List[Int8], String> = file_read_binary(fd = fd2, max_bytes = 100);

  // Check if read was successful by checking the Result type
  // We need to handle this carefully without extracting the List
  let read_ok: Bool = match read_result {
    Result::Ok(d: List[Int8]) -> true,
    Result::Err(e: String) -> false
  };

  if (read_ok == false) {
    print(value = "Failed to read binary data");
    return 1;
  }

  print(value = "✓ Read binary data successfully");

  // Close the file
  let close2: Result<Bool, String> = file_close(fd = fd2);
  let c2: Bool = match close2 {
    Result::Ok(b: Bool) -> b,
    Result::Err(e: String) -> false
  };

  print(value = "✓ Binary file write and read operations completed!");
  return 0;
}
