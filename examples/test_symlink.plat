fn main() -> Int32 {
  print(value = "Testing symlink operations...");

  let test_file: String = "test_target.txt";
  let link_file: String = "test_link.txt";
  let content: String = "Target file content";

  let open_w: Result<Int32, String> = file_open(path = test_file, mode = "w");
  let fd_w: Int32 = match open_w {
    Result::Ok(f: Int32) -> f,
    Result::Err(e: String) -> -1
  };

  if (fd_w < 0) {
    print(value = "Failed to create target file");
    return 1;
  }

  let write_result: Result<Int32, String> = file_write(fd = fd_w, data = content);
  let bytes: Int32 = match write_result {
    Result::Ok(n: Int32) -> n,
    Result::Err(e: String) -> -1
  };

  print(value = "Wrote ${bytes} bytes to target file");

  let close_w: Result<Bool, String> = file_close(fd = fd_w);

  let create_link: Result<Bool, String> = symlink_create(target = test_file, link = link_file);
  let link_created: Bool = match create_link {
    Result::Ok(s: Bool) -> s,
    Result::Err(e: String) -> false
  };

  if (link_created) {
    print(value = "Created symlink");
  } else {
    print(value = "Failed to create symlink");
    return 1;
  }

  let is_link: Bool = file_is_symlink(path = link_file);
  if (is_link) {
    print(value = "test_link.txt is a symlink");
  } else {
    print(value = "test_link.txt is NOT a symlink");
  }

  let is_not_link: Bool = file_is_symlink(path = test_file);
  if (is_not_link) {
    print(value = "test_target.txt should NOT be a symlink");
  } else {
    print(value = "test_target.txt is not a symlink");
  }

  let read_link: Result<String, String> = symlink_read(path = link_file);
  let link_target: String = match read_link {
    Result::Ok(t: String) -> t,
    Result::Err(e: String) -> ""
  };
  print(value = "Symlink target: ${link_target}");

  let open_r: Result<Int32, String> = file_open(path = link_file, mode = "r");
  let fd_r: Int32 = match open_r {
    Result::Ok(f: Int32) -> f,
    Result::Err(e: String) -> -1
  };

  if (fd_r >= 0) {
    print(value = "Successfully opened file through symlink");
    let close_r: Result<Bool, String> = file_close(fd = fd_r);
  } else {
    print(value = "Failed to open file through symlink");
  }

  let delete_link: Result<Bool, String> = symlink_delete(path = link_file);
  let link_deleted: Bool = match delete_link {
    Result::Ok(s: Bool) -> s,
    Result::Err(e: String) -> false
  };

  if (link_deleted) {
    print(value = "Deleted symlink");
  } else {
    print(value = "Failed to delete symlink");
  }

  let still_exists: Bool = file_exists(path = link_file);
  if (still_exists) {
    print(value = "Symlink still exists after delete");
  } else {
    print(value = "Symlink deleted successfully");
  }

  let target_exists: Bool = file_exists(path = test_file);
  if (target_exists) {
    print(value = "Target file still exists");
  } else {
    print(value = "Target file was incorrectly deleted");
  }

  let delete_target: Result<Bool, String> = file_delete(path = test_file);

  print(value = "All symlink tests completed!");
  return 0;
}
