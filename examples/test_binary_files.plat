fn main() -> Int32 {
  print(value = "Testing comprehensive binary file operations...");

  // Test 1: Write binary data to file
  let fd_result: Result<Int32, String> = file_open(path = "/tmp/test_binary.bin", mode = "w");
  let fd: Int32 = match fd_result {
    Result::Ok(f: Int32) -> f,
    Result::Err(e: String) -> -1
  };

  if (fd < 0) {
    print(value = "✗ Failed to open file for writing");
    return 1;
  }

  // Create binary data (bytes 0-9 with i8 suffix)
  let binary_data: List[Int8] = [0i8, 1i8, 2i8, 3i8, 4i8, 5i8, 6i8, 7i8, 8i8, 9i8];

  let write_result: Result<Int32, String> = file_write_binary(fd = fd, data = binary_data);
  let bytes_written: Int32 = match write_result {
    Result::Ok(n: Int32) -> n,
    Result::Err(e: String) -> -1
  };

  if (bytes_written < 0) {
    print(value = "✗ Failed to write binary data");
    return 1;
  }

  print(value = "✓ Wrote ${bytes_written} bytes");

  // Close the file
  let close_result: Result<Bool, String> = file_close(fd = fd);
  let _closed: Bool = match close_result {
    Result::Ok(b: Bool) -> b,
    Result::Err(e: String) -> false
  };

  // Test 2: Read binary data from file
  let fd_result2: Result<Int32, String> = file_open(path = "/tmp/test_binary.bin", mode = "r");
  let fd2: Int32 = match fd_result2 {
    Result::Ok(f: Int32) -> f,
    Result::Err(e: String) -> -1
  };

  if (fd2 < 0) {
    print(value = "✗ Failed to open file for reading");
    return 1;
  }

  let read_result: Result<List[Int8], String> = file_read_binary(fd = fd2, max_bytes = 100);

  // Check if read was successful
  let read_success: Bool = match read_result {
    Result::Ok(d: List[Int8]) -> true,
    Result::Err(e: String) -> false
  };

  if (read_success == false) {
    print(value = "✗ Failed to read binary data");
    return 1;
  }

  print(value = "✓ Read binary data successfully");

  // Close the file
  let close_result2: Result<Bool, String> = file_close(fd = fd2);
  let _closed2: Bool = match close_result2 {
    Result::Ok(b: Bool) -> b,
    Result::Err(e: String) -> false
  };

  print(value = "✓ All binary file operations passed!");
  return 0;
}
