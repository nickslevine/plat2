// Test program for Generic Type Substitution and Inheritance
// This demonstrates both features working together

// Generic base class with inheritance support
class Container<T> {
  var value: T;
  var name: string;

  init(value: T, name: string) -> Container {
    self.value = value;
    self.name = name;
    return self;
  }

  virtual fn get_description() -> string {
    return "Container '${self.name}' holds a value";
  }

  virtual fn process_value() -> T {
    return self.value;
  }

  fn get_name() -> string {
    return self.name;
  }
}

// Derived class that inherits from generic base
class NumberContainer : Container<i32> {
  var multiplier: i32;

  init(value: i32, name: string, multiplier: i32) -> NumberContainer {
    super.init(value, name);
    self.multiplier = multiplier;
    return self;
  }

  override fn get_description() -> string {
    return "NumberContainer '${self.name}' holds ${self.value} with multiplier ${self.multiplier}";
  }

  override fn process_value() -> i32 {
    return self.value * self.multiplier;
  }

  fn get_result() -> i32 {
    return self.process_value();
  }
}

// Another derived class with different type
class StringContainer : Container<string> {
  var prefix: string;

  init(value: string, name: string, prefix: string) -> StringContainer {
    super.init(value, name);
    self.prefix = prefix;
    return self;
  }

  override fn get_description() -> string {
    return "StringContainer '${self.name}' with prefix '${self.prefix}'";
  }

  override fn process_value() -> string {
    return "${self.prefix}${self.value}";
  }
}

// Generic utility function
fn create_container<T>(value: T, name: string) -> Container<T> {
  return Container(value = value, name = name);
}

fn main() -> i32 {
  // Test basic generic instantiation
  let int_container: Container<i32> = Container(value = 42, name = "integers");
  let string_container: Container<string> = Container(value = "hello", name = "strings");

  print("Basic containers:");
  print("${int_container.get_description()}: ${int_container.process_value()}");
  print("${string_container.get_description()}: ${string_container.process_value()}");

  // Test inheritance with generic base
  let number_cont = NumberContainer(value = 10, name = "numbers", multiplier = 3);
  let string_cont = StringContainer(value = "world", name = "greetings", prefix = "Hello, ");

  print("");
  print("Inherited containers:");
  print("${number_cont.get_description()}");
  print("Result: ${number_cont.get_result()}");

  print("${string_cont.get_description()}");
  print("Processed: ${string_cont.process_value()}");

  // Test polymorphism - should call overridden methods
  let base_ref: Container<i32> = number_cont;
  print("");
  print("Polymorphism test:");
  print("Base reference description: ${base_ref.get_description()}");
  print("Base reference processed value: ${base_ref.process_value()}");

  // Test generic function
  let generic_cont = create_container(100, "generic");
  print("");
  print("Generic function test:");
  print("${generic_cont.get_description()}: ${generic_cont.process_value()}");

  return 0;
}