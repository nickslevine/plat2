// Test basic channel operations with producer-consumer pattern

fn main() -> Int32 {
  print(value = "Testing channels...");

  // Create a channel with capacity 10
  let ch: Channel<Int32> = channel_init(capacity = 10);

  print(value = "Channel created");

  // Test 1: Send and receive a single value
  ch.send(value = 42);
  print(value = "Sent value 42");

  // TODO: Receive needs to return Option<Int32>, but for now we'll just test the flow
  // let result: Option<Int32> = ch.recv();
  // match result {
  //   Option::Some(val: Int32) -> print(value = "Received: ${val}"),
  //   Option::None -> print(value = "Channel closed")
  // };

  // Test 2: Send multiple values
  ch.send(value = 1);
  ch.send(value = 2);
  ch.send(value = 3);
  print(value = "Sent values 1, 2, 3");

  // Test 3: Close the channel
  ch.close();
  print(value = "Channel closed");

  print(value = "All channel tests completed!");

  return 0;
}
