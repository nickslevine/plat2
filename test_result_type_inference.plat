// Regression test for Result type inference fix
// Tests that Result constructors correctly infer type parameters from function return types

fn make_string_error(msg: String) -> Result<String, String> {
  // Should infer Result<String, String> from return type
  return Result::Err(field0 = msg);
}

fn make_string_ok(value: String) -> Result<String, String> {
  // Should infer Result<String, String> from return type
  return Result::Ok(field0 = value);
}

fn wrap_ffi_result(ffi_result: Result<Int32, String>) -> Result<String, String> {
  // Simulate wrapping an FFI Result<Int32, String> to Result<String, String>
  return match ffi_result {
    Result::Ok(val: Int32) -> Result::Ok(field0 = "success"),
    Result::Err(err: String) -> Result::Err(field0 = err)
  };
}

test result_type_inference {
  fn test_err_constructor() {
    let result: Result<String, String> = make_string_error(msg = "error");
    let is_err: Bool = match result {
      Result::Ok(val: String) -> false,
      Result::Err(err: String) -> true
    };
    assert(condition = is_err, message = "Should be an error");
  }

  fn test_ok_constructor() {
    let result: Result<String, String> = make_string_ok(value = "hello");
    let is_ok: Bool = match result {
      Result::Ok(val: String) -> true,
      Result::Err(err: String) -> false
    };
    assert(condition = is_ok, message = "Should be ok");
  }

  fn test_wrapping_ffi_error() {
    let ffi_result: Result<Int32, String> = Result::Err(field0 = "ffi error");
    let wrapped: Result<String, String> = wrap_ffi_result(ffi_result = ffi_result);
    let is_err: Bool = match wrapped {
      Result::Ok(val: String) -> false,
      Result::Err(err: String) -> true
    };
    assert(condition = is_err, message = "Wrapped result should be error");
  }

  fn test_wrapping_ffi_ok() {
    let ffi_result: Result<Int32, String> = Result::Ok(field0 = 42);
    let wrapped: Result<String, String> = wrap_ffi_result(ffi_result = ffi_result);
    let is_ok: Bool = match wrapped {
      Result::Ok(val: String) -> true,
      Result::Err(err: String) -> false
    };
    assert(condition = is_ok, message = "Wrapped result should be ok");
  }
}

fn main() -> Int32 {
  print(value = "Result type inference working correctly!");
  return 0;
}
